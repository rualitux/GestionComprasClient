@page "/producto"
@page "/producto/{id:int}"
@using CJPWASM.Models;
@using CJPWASM.Services.ProductoService;
@inject IProductoService ProductoService
@if (Id == null)
{
    <PageTitle>Crear Producto</PageTitle>
    <h3>Crear Nuevo Producto</h3>
}
else
{
    Console.WriteLine("PageTitle y Editar ID Not null");
    <PageTitle>Editar @producto.Nombre</PageTitle>
    <h3>Editar @producto.Nombre</h3>
}
<EditForm Model="producto" OnSubmit="Guardar">
    <div>
        <label for="nombre">Nombre</label>
        <InputText id="nombre" @bind-Value="producto.Nombre" class="form-control"></InputText>
    </div>
    <div>
        <label for="presentacion">Presentacion</label>
        <InputText id="presentacion" @bind-Value="producto.Presentacion" class="form-control"></InputText>
    </div>

    <div>
        <label>Categoria</label><br />
        <InputSelect @bind-Value="producto.CategoriaId" class="form-select">
            @foreach (var item in ProductoService.Categorias)
            {
                <option value="@item.Id">@item.Valor</option>
            }
        </InputSelect>
    </div>
     <div>
        <label>Unidad</label><br />
        <InputSelect @bind-Value="producto.UnidadMedidaId" class="form-select">
            @foreach (var item in ProductoService.UnidadMedidas)
            {
                <option value="@item.Id">@item.Valor</option>
            }
        </InputSelect>
    </div>



    <div>
        <label for="costoestandar">Costo Estandar</label>
        <InputNumber id="costoestandar" @bind-Value="producto.CostoEstandar" class="form-control"></InputNumber>
    </div>
    <div>
        <label for="stockminimo">Stock de Seguridad</label>
        <InputNumber id="stockminimo" @bind-Value="producto.StockMinimo" class="form-control"></InputNumber>
    </div>
    <br />
    <button type="submit" class="btn btn-primary">@btnText</button>
</EditForm>
    <br />
    <div>
        <h4>Inventarios. Total: @producto.StockTotal || @producto.EstadoStock</h4>
    </div>
    <table class="table">
        <thead>
            <tr>
                <th>Stock</th>
            <th>Estructura</th>
            <th>Estr. Cantidad</th>
                <th>Estr. Multiplicador</th>
                <th>Expiración</th>
                <th>Lote</th>
                <th>Area</th>
                <th></th>

            </tr>
        </thead>
        <tbody>
            @foreach (var item in producto.Inventarios)
            {
                <tr>
                    <td>@item.Stock</td>
                    <td>@item.Estructura</td>
                    <td>@item.EstructuraCantidad</td>
                    <td>@item.MultiplicadorUnidad</td>
                    <td>@item.FechaExpiracion</td>
                    <td>@item.Lote</td>
                    <td>@item.AreaId</td>
                </tr>
            }
        </tbody>
    </table>

<br />
<div>
    <h4>Bitácora de Detalles de Compra</h4>
</div>
<table class="table">
    <thead>
        <tr>
            <th>Lote</th>
            <th>Expiracion</th>
            <th>Estructura</th>
            <th>Multiplicador</th>
            <th>Costo(unidad)</th>
            <th>N° Ordenado</th>
            <th>SubT. Ordenado(S/.)</th>
            <th>N° Recibido</th>
            <th>SubT. Recibido(S/.)</th>
            <th>N° Retornado</th>
            <th>SubT. Retornado</th>
            <th>Markup</th>
            <th>SubT. Markup</th>
            <th>¿Ahorro?</th>

            <th></th>

        </tr>
    </thead>
    <tbody>
        @foreach (var item in producto.CompraDetalles)
        {
            <tr>
                <td>@item.Lote</td>
                <td>@item.FechaExpiracion</td>
                <td>@item.Estructura</td>
                <td>@item.MultiplicadorUnidad</td>
                <td>@item.CostoActual</td>
                <td>@item.CantidadOrdenada</td>
                <td>@item.SubTotalOrdenado</td>
                <td>@item.CantidadRecibida</td>
                <td>@item.SubTotalRecibido</td>
                <td>@item.CantidadRetornada</td>
                <td>@item.CostoRetornado</td>
                <td>@item.DiferenciaPrecio</td>
                <td>@item.SubTotalDiferencia</td>
                <td>@item.EstadoAhorroItem</td>
            </tr>
        }
    </tbody>
</table>


@code {
    [Parameter]
    public int? Id { get; set; }
    string btnText = string.Empty;
    Producto producto = new Producto
        //(); 
        { Inventarios = new List<Inventario>()
            , CompraDetalles = new List<CompraDetalle>(),
            //Categoria = new Enumerado()
    };
    protected override async Task OnInitializedAsync()
    {
        btnText = Id == null ? "Crear Producto" : "Actualizar Producto";
        await ProductoService.GetEnumerados();
    }
    protected override async Task OnParametersSetAsync()
    {
        if (Id == null)
        {
            //producto.Categoria = ProductoService.Categorias[0];
            //producto.CategoriaId = producto.Categoria.Id;
            //producto.UnidadMedida = ProductoService.UnidadMedidas[0];
            //producto.UnidadMedidaId = producto.UnidadMedida.Id;
            Console.WriteLine("Entro a OnParametersSetAsyncNULL");

        }
        else
        {
            Console.WriteLine("Entro al else para golpear GetProductoId");
            Console.WriteLine($"ItemIdAntes{producto.Id}");
            var itemawaiteado = await ProductoService.GetProductoById((int)Id);
            if (itemawaiteado != null)
            {
                Console.WriteLine("ProductoAwaiteado=NoEsNull");
                producto = itemawaiteado;
            }
            else Console.WriteLine("ProductoAwaiteado=Null");
        }
    }
    async Task Guardar()
    {
        if (Id == null)
        {

            await ProductoService.CreateProducto(producto);
        }
        else
        {
            await ProductoService.UpdateProducto(producto);
        }
    }
}
